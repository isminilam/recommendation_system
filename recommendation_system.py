# -*- coding: utf-8 -*-
"""Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WZAPK-Jl3vE5U0UHPo9ki_iyhffXxPnZ

### **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import euclidean_distances

"""### **Load Dataset**"""

df = pd.read_csv('fashion_products.csv')
df.head()

"""### **Data Understanding**"""

print("Jumlah kolom:", df.shape[1])
print("Jumlah baris:", df.shape[0])

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

# Distribusi antar numerik
plt.figure(figsize=(12, 6))
sns.histplot(data=df, x='User ID', kde=True, ax=plt.subplot(2, 2, 1))
sns.histplot(data=df, x='Product ID', kde=True, ax=plt.subplot(2, 2, 2))
sns.histplot(data=df, x='Price', kde=True, ax=plt.subplot(2, 2, 3))
sns.histplot(data=df, x='Rating', kde=True, ax=plt.subplot(2, 2, 4))
plt.tight_layout()
plt.show()

# Distribusi antar kategorik
categorical_cols = ['Product Name', 'Brand', 'Category', 'Color', 'Size']
plt.figure(figsize=(15, 10))
for i, col in enumerate(categorical_cols):
  plt.subplot(3, 3, i+1)
  sns.countplot(data=df, x=col, order = df[col].value_counts().index, palette='viridis')
  plt.title(f'Distribution of {col}')
  plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Distribusi untuk user ID yang memiliki interaksi atau memberikan rating paling banyak

top_users = df['User ID'].value_counts().nlargest(20).index

plt.figure(figsize=(10, 6))
sns.countplot(data=df[df['User ID'].isin(top_users)], x='User ID', order=top_users)
plt.title('Top 20 User ID dengan Interaksi Terbanyak')
plt.xlabel('User ID')
plt.ylabel('Jumlah Interaksi')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Menghitung rata-rata rating product
rating_per_product = df.groupby('Product ID')['Rating'].agg(['mean', 'count']).reset_index()
rating_per_product.columns = ['Product ID', 'Average Rating', 'Rating Count']
rating_per_product = rating_per_product.sort_values(by='Average Rating', ascending=False)

top_products = rating_per_product.head()

# Menampilkan 5 produk dengan rating tertinggi
plt.figure(figsize=(10, 6))
sns.barplot(data=top_products, x='Product ID', y='Average Rating', palette='Blues_r')
plt.title('Top 5 Produk dengan Rating Tertinggi')
plt.xlabel('Product ID')
plt.ylabel('Rata-rata Rating')
for i, v in enumerate(top_products['Average Rating']):
    plt.text(i, v + 0.05, f'{v:.2f}', ha='center')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Menampilkan 5 produk dengan rating terendah
lowest_rated_products = rating_per_product.sort_values(by='Average Rating', ascending=True).head(5)

plt.figure(figsize=(10, 6))
sns.barplot(data=lowest_rated_products, x='Product ID', y='Average Rating', palette='Reds_r')
plt.title('Top 5 Produk dengan Rating Terendah')
plt.xlabel('Product ID')
plt.ylabel('Rata-rata Rating')
for i, v in enumerate(lowest_rated_products['Average Rating']):
    plt.text(i, v + 0.05, f'{v:.2f}', ha='center')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Korelasi antar fitur numerik
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Numerical Features')
plt.show()

"""### **Data Preparation**"""

# Memindahkan Dress dari Men's Fashion ke Women's Fashion
df.loc[(df['Product Name'] == 'Dress') & (df['Category'] == "Men's Fashion"), 'Category'] = "Women's Fashion"
print("Jumlah Dress di Men's Fashion setelah pembersihan:",
      len(df[(df['Product Name'] == 'Dress') & (df['Category'] == "Men's Fashion")]))

# Mengubah nilai pada kolom menjadi Category, Brand, Color, Size, dan Product Name huruf kecil
df['Category'] = df['Category'].str.lower()
df['Brand'] = df['Brand'].str.lower()
df['Color'] = df['Color'].str.lower()
df['Size'] = df['Size'].str.lower()
df['Product Name'] = df['Product Name'].str.lower()

# Menyeleksi atribut dengan memilih kolom yang relevan untuk CBF
features = ['Product Name', 'Category', 'Brand', 'Color', 'Size']
cbf_data = df[features].copy()

# Transformasi Data dengan One-Hot Encoding
categorical_features = ['Product Name', 'Category', 'Brand', 'Color', 'Size']
encoder = OneHotEncoder(handle_unknown='ignore')
encoded_features = encoder.fit_transform(cbf_data[categorical_features])
encoded_columns = encoder.get_feature_names_out(categorical_features)
encoded_df = pd.DataFrame(encoded_features.toarray(), columns=encoded_columns, index=cbf_data.index)

"""## **Modeling**

**Cosine Similarity**
"""

# Menghitung Cosine Similarity
similarity_matrix = cosine_similarity(encoded_df)
similarity_df = pd.DataFrame(similarity_matrix, index=df['Product ID'], columns=df['Product ID'])
similarity_df.head()

# Fungsi Rekomendasi Consine Similarity
def get_recommendations_with_similarity(product_id, similarity_matrix, data, top_n=5):
    sim_scores = similarity_matrix.loc[product_id]
    sim_scores = sim_scores.sort_values(ascending=False)
    top_products = sim_scores.iloc[1:top_n+1].index
    recommendations = data[data['Product ID'].isin(top_products)][['Product ID', 'Product Name', 'Brand', 'Category', 'Color', 'Size']]
    recommendations['Similarity Score'] = sim_scores[top_products].values
    return recommendations.sort_values(by='Similarity Score', ascending=False)

product_id = 65
recommendations = get_recommendations_with_similarity(product_id, similarity_df, df, top_n=5)
print(f"\nRekomendasi untuk Product ID {product_id} menggunakan Cosine Similarity:")
recommendations

"""**Euclidean Distance**"""

# Menghitung Euclidean Distance
distance_matrix = euclidean_distances(encoded_df)

# Mengonversi Euclidean Distance menjadi skor kemiripan
# Similarity = 1 / (1 + distance), sehingga nilai lebih kecil (jarak kecil) menghasilkan kemiripan lebih besar
similarity_matrix = 1 / (1 + distance_matrix)

# Membuat DataFrame untuk matriks kemiripan
similarity_df_euclidean = pd.DataFrame(similarity_matrix, index=df['Product ID'], columns=df['Product ID'])

# Menampilkan 5 baris pertama dari matriks kemiripan
print("\nMatriks Kemiripan (berbasis Euclidean Distance) - 5 baris pertama:")
similarity_df_euclidean.head()

# Fungsi Rekomendasi Euclidean Distance
def get_recommendations_with_euclidean(product_id, similarity_matrix, data, top_n=5):

    # Mengambil skor kemiripan untuk product_id
    sim_scores = similarity_matrix.loc[product_id]

    # Mengurutkan skor kemiripan secara menurun
    sim_scores = sim_scores.sort_values(ascending=False)

    # Mengambil top_n produk paling mirip, kecuali produk itu sendiri
    top_products = sim_scores.iloc[1:top_n+1].index

    # Membuat DataFrame rekomendasi
    recommendations = data[data['Product ID'].isin(top_products)][['Product ID', 'Product Name', 'Brand', 'Category', 'Color', 'Size']]
    recommendations['Similarity Score'] = sim_scores[top_products].values

    # Mengurutkan berdasarkan skor kemiripan
    return recommendations.sort_values(by='Similarity Score', ascending=False)

product_id = 65
recommendations_euclidean = get_recommendations_with_euclidean(product_id, similarity_df_euclidean, df, top_n=5)
print(f"\nRekomendasi untuk Product ID {product_id} menggunakan Euclidean Distance:")
recommendations_euclidean

"""### **Evalution**

**Cosine Similarity**
"""

def evaluate_cbf_recommendations(similarity_df, df, test_product_ids, k=5):

    results = []

    for product_id in test_product_ids:
        # Mendapatkan rekomendasi
        recommendations = get_recommendations_with_similarity(product_id, similarity_df, df, top_n=k)

        # Mendapatkan atribut produk input
        product_info = df[df['Product ID'] == product_id][['Product Name', 'Category', 'Color', 'Size']].iloc[0]
        input_product_name = product_info['Product Name']
        input_category = product_info['Category']
        input_color = product_info['Color']
        input_size = product_info['Size']

        # Menghitung Precision@5
        relevant_count = sum(
            (recommendations['Product Name'] == input_product_name) &
            (recommendations['Category'] == input_category)
        )
        precision = relevant_count / k

        # Menghitung NDCG@5
        relevance_scores = []
        for _, row in recommendations.iterrows():
            score = 0
            if row['Color'] == input_color:
                score += 1
            if row['Size'] == input_size:
                score += 1
            relevance_scores.append(score)

        dcg = sum(rel / np.log2(i + 2) for i, rel in enumerate(relevance_scores))
        sorted_relevance = sorted(relevance_scores, reverse=True)
        idcg = sum(rel / np.log2(i + 2) for i, rel in enumerate(sorted_relevance))
        ndcg = dcg / idcg if idcg > 0 else 0

        # Menyimpan hasil
        results.append({
            'Product ID': product_id,
            'Precision@5': precision,
            'NDCG@5': ndcg,
            'Recommendations': recommendations
        })

        # Menampilkan hasil
        print(f"\nEvaluasi untuk Product ID {product_id} ({input_product_name}, {input_category}, {input_color}, {input_size}):")
        print(recommendations)
        print(f"Precision@5: {precision:.3f}, NDCG@5: {ndcg:.3f}")

    return results

# Menjalankan Evaluasi
test_product_ids = [65]
results = evaluate_cbf_recommendations(similarity_df, df, test_product_ids, k=5)

"""**Euclidean Distance**"""

def evaluate_cbf_recommendations_euclidean(similarity_df, df, test_product_ids, k=5):
    results = []

    for product_id in test_product_ids:
        # Mendapatkan rekomendasi menggunakan fungsi Euclidean
        recommendations = get_recommendations_with_euclidean(product_id, similarity_df, df, top_n=k)

        # Mendapatkan atribut produk input
        product_info = df[df['Product ID'] == product_id][['Product Name', 'Category', 'Color', 'Size']].iloc[0]
        input_product_name = product_info['Product Name']
        input_category = product_info['Category']
        input_color = product_info['Color']
        input_size = product_info['Size']

        # Menghitung Precision@5
        relevant_count = sum(
            (recommendations['Product Name'] == input_product_name) &
            (recommendations['Category'] == input_category)
        )
        precision = relevant_count / k

        # Menghitung NDCG@5
        relevance_scores = []
        for _, row in recommendations.iterrows():
            score = 0
            if row['Color'] == input_color:
                score += 1
            if row['Size'] == input_size:
                score += 1
            relevance_scores.append(score)

        dcg = sum(rel / np.log2(i + 2) for i, rel in enumerate(relevance_scores))
        sorted_relevance = sorted(relevance_scores, reverse=True)
        idcg = sum(rel / np.log2(i + 2) for i, rel in enumerate(sorted_relevance))
        ndcg = dcg / idcg if idcg > 0 else 0

        # Menyimpan hasil
        results.append({
            'Product ID': product_id,
            'Precision@5': precision,
            'NDCG@5': ndcg,
            'Recommendations': recommendations
        })

        # Menampilkan hasil
        print(f"\nEvaluasi untuk Product ID {product_id} ({input_product_name}, {input_category}, {input_color}, {input_size}):")
        print(recommendations)
        print(f"Precision@5: {precision:.3f}, NDCG@5: {ndcg:.3f}")

    return results

# Menjalankan Evaluasi
test_product_ids = [65]
results = evaluate_cbf_recommendations_euclidean(similarity_df_euclidean, df, test_product_ids, k=5)